#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cryptoview:server');
var http = require('http');
var enforce = require('express-sslify');
const socketIo = require('socket.io');
const axios = require('axios');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
app.use(enforce.HTTPS({ trustProtoHeader: true }));
var server = http.createServer(app);

const io = socketIo(server);

// Function to execute on interval - fetchTickersAll
const fetchTickersAll = require('../utils/ticker');
const getApiAndEmit = async socket => {
  try {
    // const res = await axios.get('https://crypto-bot-trm313.herokuapp.com/api/v1/tickers/all');
    // socket.emit("FromAPI", res.data);
    const tickers = await fetchTickersAll();
    io.sockets.emit("FromAPI", tickers);
  } catch (error) {
    console.error(`getApiAndEmit>> Error: ${error.code}`);
  }
};

const fetchCapTable = require('../utils/market-cmc');
let cmcData;
const getCapAndEmit = async socket => {
  try {
    data = await fetchCapTable();
    cmcData = data.data;
    io.sockets.emit("CapTable", cmcData);
  } catch (error) {
    console.error(`getCapAndEmit>> Error: ${error.code}`);
  }
}

let interval;
io.on("connection", socket => {
  if (!cmcData) {
    getCapAndEmit(socket);
  }
  // Emit current state on new client connect
  socket.emit("CapTable", cmcData);

  setInterval(() => getApiAndEmit(socket), 10000);
  setInterval(() => getCapAndEmit(socket), 360000);

  socket.on("disconnect", () => {
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Server is running on ' + bind);
}
